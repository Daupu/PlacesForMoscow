import const
import dbwork
import excelwork
import pyowm
import logging
import xlrd
import asyncio
from geopy import distance
from geopy.distance import lonlat, distance, geodesic, vincenty
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, \
    KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, venue
from aiogram.bot import api


owm = pyowm.OWM(const.key_Token_open_weather)
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

PATCHED_URL = "https://telegg.ru/orig/bot{token}/{method}"
setattr(api, 'API_URL', PATCHED_URL)

loop = asyncio.get_event_loop()
bot = Bot(token=const.key_Token, parse_mode="HTML")
dp = Dispatcher(bot=bot, loop=loop)

button_news = KeyboardButton('–ù–æ–≤–æ—Å—Ç–∏ üí¨')
button_location = KeyboardButton('–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é üó∫Ô∏è', request_location=True)
button_weather = KeyboardButton("–ü–æ–≥–æ–¥–∞ üå§")
markup_first = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
markup_first.add(button_news, button_weather, button_location)

inline_button_exhibitions = InlineKeyboardButton("–í—ã—Å—Ç–∞–≤–∫–∏", callback_data="exhibitions")
inline_button_activity = InlineKeyboardButton("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è", callback_data="activity")
inline_button_stock = InlineKeyboardButton("–ê–∫—Ü–∏—è", callback_data="stock")
inline_markup_first = InlineKeyboardMarkup(row_width=2)
inline_markup_first.add(inline_button_exhibitions, inline_button_activity, inline_button_stock)


@dp.callback_query_handler(lambda qwer: qwer.data == "exhibitions")
async def work_answer_exhibitions(callback_query: types.CallbackQuery):
    info_name = "–í—ã—Å—Ç–∞–≤–∫–∏"
    work_db = dbwork.DATABase()
    messages = work_db.data_info_return(info_name)
    await bot.send_message(callback_query.from_user.id, messages)


@dp.callback_query_handler(lambda qwer: qwer.data == "activity")
async def work_answer_activity(callback_query: types.CallbackQuery):
    info_name = "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"
    work_db = dbwork.DATABase()
    messages = work_db.data_info_return(info_name)
    await bot.send_message(callback_query.from_user.id, messages)


@dp.callback_query_handler(lambda qwer: qwer.data == "stock")
async def work_answer_exhibitions(callback_query: types.CallbackQuery):
    info_name = "–ê–∫—Ü–∏–∏"
    work_db = dbwork.DATABase()
    messages = work_db.data_info_return(info_name)
    await bot.send_message(callback_query.from_user.id, messages)


@dp.message_handler(lambda message: '–ù–æ–≤–æ—Å—Ç–∏ üí¨' == message.text)
async def work_answer_news(message: types.message):
    info_name = "–ì–ª–∞–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏"
    work_db = dbwork.DATABase()
    messages = work_db.data_info_return(info_name)
    await message.reply(messages, reply=False, reply_markup=inline_markup_first)


@dp.message_handler(lambda message: '–ü–æ–≥–æ–¥–∞ üå§' == message.text)
async def work_weather(message: types.message):
    observation = owm.weather_at_place('Moscow, RU')
    w = observation.get_weather()
    weather_temp = w.get_temperature('celsius')['temp']
    weather_temp_max = w.get_temperature('celsius')['temp_max']
    weather_temp_min = w.get_temperature('celsius')['temp_min']
    weather_answer = (
        """–í –ú–æ—Å–∫–≤–µ —Å–µ–π—á–∞—Å {}‚ÑÉ (m–∞x={}‚ÑÉ min={}‚ÑÉ)""".format(weather_temp, weather_temp_max, weather_temp_min))
    await message.reply(weather_answer, reply=False)


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    user = types.User.get_current()
    await message.reply(
        """–ü—Ä–∏–≤–µ—Ç {}! 
        –Ø - PlaceForMoscow
        "—Ç–µ–∫—Å—Ç –ø—Ä–æ –±–æ—Ç–∞"
        """.format(user.first_name),
        reply=False, reply_markup=markup_first
    )
    # await message.reply("–£–±–∏—Ä–∞–µ–º —à–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π", reply_markup=ReplyKeyboardRemove())
    work_db = dbwork.DATABase()
    work_db.data_add_new_person()



@dp.message_handler(commands=['help'])
async def send_menu(message: types.Message):
    await message.reply(
        """
        –ë–æ—Ç –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª?
        ‚Äî –ü—Ä–æ—Å—Ç–æ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å.
        
        –ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –∫–Ω–æ–ø–∫–∏?
        ‚Äî –ù–∞–π–¥–∏—Ç–µ –≤ –ø—Ä–∞–≤–æ–º –Ω–∏–∂–Ω–µ–º —É–≥–ª—É –∏–∫–æ–Ω–∫—É –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–≤—ã–≥–ª—è–¥–∏—Ç, –∫–∞–∫ 4 –∫–≤–∞–¥—Ä–∞—Ç–∞ –≤ —Ä–∞–º–∫–µ) –∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–µ—ë.
        
        –•–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å —Ñ–∏–¥–±–µ–∫
        ‚Äî –ù–∞—á–Ω–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ª–æ–≤–∞ "–ê–¥–º–∏–Ω".
        
        –ß—Ç–æ —è —É–º–µ—é:
        >>>>>>>>>>>
        """, reply=False
    )


@dp.message_handler(commands=['admin'])
async def work_admin(message: types.Message):
    user = types.User.get_current()
    if user.id == const.admin_id:
        await message.reply("info ", reply=False)


@dp.message_handler(lambda message: True, content_types=['location'])
async def work_location(message: types.Message):
    lon = message.location.longitude
    lat = message.location.latitude
    user_local = (lat, lon)
    workexcel = excelwork.Excel()
    index = workexcel.distance_calculation(user_local)
    print(index)
    await message.reply("–†—è–¥–æ–º —Å –≤–∞–º–∏: {}".format(workexcel.common_name[index]), reply=False)
    await message.answer_venue(latitude=workexcel.array_lat[index],
                               longitude=workexcel.array_lon[index],
                               title=workexcel.category[index],
                               address=workexcel.common_name[index])


@dp.message_handler(content_types=types.ContentType.TEXT)
async def work_echo(message: types.Message):
    work_db = dbwork.DATABase()
    text = message.text
    user = types.User.get_current()
    if user.id == const.admin_id:
        if text.startswith("–í—ã—Å—Ç–∞–≤–∫–∏"):
            info_name = "–í—ã—Å—Ç–∞–≤–∫–∏"
            info_text = message.text
            work_db.data_update_info(info_name, info_text)
            await message.reply("save", reply=False)

        elif text.startswith("–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"):
            info_name = "–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è"
            info_text = message.text
            work_db.data_update_info(info_name, info_text)
            await message.reply("save", reply=False)

        elif text.startswith("–ê–∫—Ü–∏–∏"):
            info_name = "–ê–∫—Ü–∏–∏"
            info_text = message.text
            work_db.data_update_info(info_name, info_text)
            await message.reply("save", reply=False)

        elif text.startswith("–ì–ª–∞–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏"):
            info_name = "–ì–ª–∞–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏"
            info_text = message.text
            work_db.data_update_info(info_name, info_text)
            await message.reply("save", reply=False)

        elif text.startswith("answer"):
            work_db.data_return_all_info()
            await message.reply(work_db.data_return_all_info(), reply=False)

    elif text and user.id != const.admin_id and not text.startswith('/'):
        await message.reply("{} —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç".format(text), reply=False)
        person_answer = text
        work_db.data_add_text_person(person_answer)
    elif text and user.id != const.admin_id and text.startswith('/'):
        await message.reply("{} —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç".format(text), reply=False)


async def send_admin_startup(dp):
    await bot.send_message(chat_id=const.admin_id, text="–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")


def main():
    executor.start_polling(dispatcher=dp, skip_updates= True, on_startup=send_admin_startup)


if __name__ == '__main__':
    main()
